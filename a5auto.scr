#include "ls.icl"                  // Standard functions
#include "or.icl"                // Command names
#cmdbuff 1

#define VERSION "1.02"

// 1.01: supports L&M automation.
// 1.02: S1 shuttle up/down movements.

// Layout configuration bits.
#define LC_SMASK2      0x20000000      // Extention of LC_SMASK
#define LC_AUTOPROBE   0x10000000      // Autodetect probes (Kelvin or standard)
#define LC_TYPEMASK    0x0B000000      // General type of machine
#define   LC_STD       0x00000000      // LC_TYPEMASK: standard A5/A6 tester
#define   LC_NEWA1     0x01000000      // LC_TYPEMASK: new A1 (slow A5) tester
#define   LC_S1        0x02000000      // LC_TYPEMASK: S1/S2
#define   LC_A8        0x03000000      // LC_TYPEMASK: A7/A8
#define LC_VACUUMBOX   0x04000000      // Disable movements on bottom side
#define LC_MOREMASK    0x00C00000      // Mask for more space bits
#define   LC_MOREBOT   0x00800000      // Give more space on bottom
#define   LC_MORETOP   0x00400000      // Give more space on the top
#define LC_DEADLOCKS   0x00200000      // Autoresolve deadlocks
#define LC_ILLUM       0x00100000      // Auto switch video illumination on/off
#define LC_HARDZ       0x00040000      // Hard Z contacting (A2/A4/A5 only)
#define LC_QUAKE       0x00020000      // Earthquake protection on (M2 only)
#define LC_SMASK1      0x0001C000      // Mask for type of loading system
#define LC_RELAYS      0x00002000      // Slow (LATEST-compatible) relays
#define LC_OHTYPE      0x00001C00      // Mask to extract on-head type
#define   LC_NOFIELD   0x00001000      // On-heads without field amplifier
#define   LC_PHADJ     0x00000C00      // On-heads with adjustable field phase
#define   LC_ACTIVE    0x00000400      // Active on-heads (with Dallas/R1-R4)
#define   LC_PASSIVE   0x00000000      // Passive on-heads (manual C adjust)
#define LC_TRAFFICS    0x00000200      // Hitachi-style traffic lights
#define LC_ZSENSORS    0x00000100      // A series: Z pressure sensors active
#define LC_LOWBAUD     0x00000100      // M2: low AFMCU I/O baud rate
#define LC_ISM2        0x00000080      // M2 tester
#define LC_A2LOADER    0x00000040      // A2-style loader, enables LC_SMASK
#define LC_ENCODERS    0x00000020      // Tester with encoders
#define LC_COVER       0x00000010      // I have forgotten what it means
#define LC_HIGHZ       0x00000008      // Z always moves with full hub (B1)
#define LC_LDELAY      0x00000004      // Wait after light off (obsolete)
#define LC_AMASK       0x00000003      // Mask for type of antennae
#define   LC_EXTANT    0x00000000      // LC_AMASK: external (A1) antennae
#define   LC_INTANT    0x00000001      // LC_AMASK: internal antennae (void)
#define   LC_FINGANT   0x00000002      // LC_AMASK: finger antennae
// Alternative (old) interpretation of LC_OHTYPE bits.
#define LC_PHASEADJ    0x00000800      // On-heads with adjustable field phase
#define LC_ACTIVEONHD  0x00000400      // Active on-heads (with Dallas/R1-R4)
// Tester types in LC_SMASK=(LC_SMASK2|LC_SMASK1).
#define LC_LMMAN       0x0001C000      // L&M manual tester
#define LC_LMS2        0x00018000      // L&M for S2a
#define LC_EPCOS       0x00014000      // L&M for EPCOS tester
#define LC_LM          0x00010000      // L&M for A5a
#define LC_A5WIDE      0x0000C000      // A5 wide shuttle
#define LC_AUTOMATE    0x00008000      // Automatical shuttle
#define LC_A2XSHUT     0x00004000      // A2X shuttle
#define LC_A2SHUT      0x00000000      // A2 standard shuttle
// Useful shortcuts and substitutions.
#define LC_SMASK       (LC_SMASK2|LC_SMASK1)
#define LC_LDMASK      (LC_SMASK2|LC_SMASK1|LC_A2LOADER)
#define LC_LMAUTO      (LC_LM|LC_A2LOADER)
#define LC_EPCOSAUTO   (LC_EPCOS|LC_A2LOADER)

handle           hmain                 // Main window

handle           hunlock
handle           hlock
handle           hreset
handle           hempty
handle           hcont
handle           hcondbad
handle           hcondgood
handle           hbad
handle           hgood
handle           hstopauto
handle           hload1,hload2
handle           hmove
handle           hscan
handle           hscan1,hscan2
handle           htext1,htext2
handle           hbar1,hbar2
handle           hlabel,hlinx,hsend,hclear
handle           hbmp1,hbmp2
handle           hshup,hshdn
handle           hquit

function int Answerproc(char *answer,int info)
  int i,n
  char s1[257],s2[257]
  if answer[4]==S_MARK then
     s1[0]=' '; i=1
     for n=5,answer[n]!='\0' && n<$uint2(answer), n++ do
       s1[i]=answer[n]; i++
     enddo
     s2[0]=' '; i=1; n++
     for n=n,answer[n]!='\0' && n<$uint2(answer), n++ do
       s2[i]=answer[n]; i++
     enddo
     change htext1 text=s1
     change htext2 text=s2
  endif
end

// Creates 32x16-pixel Smiley Cat.
function int Createsmileycat(char *buf)
  $xuint4(buf+60)=0b11111111111111111111111111111111;
  $xuint4(buf+56)=0b10111110000000000000000011111101;
  $xuint4(buf+52)=0b10100001111111111111111100000101;
  $xuint4(buf+48)=0b10010001000000000000000010001001;
  $xuint4(buf+44)=0b10001010010100000000101001010001;
  $xuint4(buf+40)=0b10000100001000000000010000100001;
  $xuint4(buf+36)=0b10000100010100000000101000100001;
  $xuint4(buf+32)=0b10000100000000000000000000100001;
  $xuint4(buf+28)=0b10000100000000011000000000100001;
  $xuint4(buf+24)=0b10000100000000000000000000100001;
  $xuint4(buf+20)=0b10000010000001000010000001000001;
  $xuint4(buf+16)=0b10000001000000111100000010000001;
  $xuint4(buf+12)=0b10000000110000000000001100000001;
  $xuint4(buf+8) =0b10000000001111111111110000000001;
  $xuint4(buf+4) =0b10000000001000000000010000000001;
  $xuint4(buf)   =0b11111111111111111111111111111111;
end

// Creates 32x16-pixel triangle.
function int Createoktext(char *buf)
  $xuint4(buf+60)=0b11111111111111111111111111111111;
  $xuint4(buf+56)=0b10000000000000000000000000000001;
  $xuint4(buf+52)=0b10000000000000000000000001000001;
  $xuint4(buf+48)=0b10000000000000000000000011100001;
  $xuint4(buf+44)=0b10000000000000000000000101010001;
  $xuint4(buf+40)=0b10011100000100010000001001001001;
  $xuint4(buf+36)=0b10100010000100010000010001000101;
  $xuint4(buf+32)=0b10100010000100100000000001000001;
  $xuint4(buf+28)=0b10100010000111000000000001000001;
  $xuint4(buf+24)=0b10100010000100100000000001000001;
  $xuint4(buf+20)=0b10100010110100010110000001000001;
  $xuint4(buf+16)=0b10011100110100010110000001000001;
  $xuint4(buf+12)=0b10000000000000000000000001000001;
  $xuint4(buf+8) =0b10000000000000000000000001000001;
  $xuint4(buf+4) =0b10000000000000000000000000000001;
  $xuint4(buf)   =0b11111111111111111111111111111111;
end

function int Sendcmd(int mode,int count)
  char buf[16]
  buf[0]=S_LOCKDOOR
  buf[1]=mode
  if mode<16 || mode>=64 then
    SYS.Sendimm(0,2,buf)
  else
    buf[2]=count
    SYS.Sendimm(0,3,buf)
  endif
end

function int main()
  int islmauto
  char buf[256]
  if ($LAY.config & 0x1C000)==0x10000 then
    islmauto=1
  else
    islmauto=0
  endif
  hmain=control WINDOW
    window=NULL
    position=10,10,150,525
    name="A5 自动"
    help=" "
    bkcolor=WHITEBLUE
  endc
  hunlock=control BUTTON
    window=hmain
    position=10,10,130,20
    text="Unlock"
    help="开门 / 全部卸载"
  endc
  hlock=control BUTTON
    window=hmain
    position=10,35,130,20
    text="Lock"
    help="关门 / 装载 1"
  endc
  hreset=control BUTTON
    window=hmain
    position=10,60,130,20
    text="Reset auto"
    help="重置自动化"
  endc
  hempty=control BUTTON
    window=hmain
    position=10,85,130,20
    text="Set empty"
    help="假设为空档"
  endc
  hcont=control BUTTON
    window=hmain
    position=10,110,130,20
    text="继续"
    help="继续加载"
  endc
  hcondbad=control BUTTON
    window=hmain
    position=10,135,130,20
    text="Bad, if any"
    help="移动到不良处，如果有"
  endc
  hcondgood=control BUTTON
    window=hmain
    position=10,160,130,20
    text="Good, if any"
    help="移动到良品处，如果有"
  endc
  hbad=control BUTTON
    window=hmain
    position=10,185,130,20
    text="To bad"
    help="移动到不良处"
  endc
  hgood=control BUTTON
    window=hmain
    position=10,210,130,20
    text="To good"
    help="移动到良品处"
  endc
  if ($LAY.config & LC_LDMASK)==LC_LMAUTO then
    hstopauto=control BUTTON
      window=hmain
      position=10,235,130,20
      text="停止循环"
      help="停止循环"
    endc
  else
    hstopauto=control BUTTON
      window=hmain
      position=10,235,130,20
      text="Stop automation"
      help="停止自动化"
    endc
  endif
  hload1=control BUTTON
    window=hmain
    position=10,260,60,20
    text="Load 1"
    help="装载板1"
  endc
  if islmauto then
    hmove=control BUTTON
      window=hmain
      position=80,260,60,20
      text="Move 1"
      help="将板1移至不良"
    endc
  else
    hload2=control BUTTON
      window=hmain
      position=80,260,60,20
      text="Load 2"
      help="装载板2"
    endc
  endif
  if islmauto then
    hscan=control BUTTON
      window=hmain
      position=10,285,130,20
      text="Scan barcode"
      help="读取表面的条形码"
    endc
  else
    hscan1=control BUTTON
      window=hmain
      position=10,285,60,20
      text="Scan 1"
      help="装载板1 并读取条形码"
    endc
    hscan2=control BUTTON
      window=hmain
      position=80,285,60,20
      text="Scan 2"
      help="装载板2 并读取条形码"
    endc
  endif
  htext1=control TEXT
    window=hmain
    position=10,312,130,18
    help="条形码 1"
    bkcolor=WHITE
    mode=M_BORDER
  endc
  htext2=control TEXT
    window=hmain
    position=10,332,130,18
    help="条形码 2"
    bkcolor=WHITE
    mode=M_BORDER
  endc
  hbar1=control BUTTON
    window=hmain
    position=10,355,60,20
    text="Bar 1"
    help="从板1获取条形码"
  endc
  hbar2=control BUTTON
    window=hmain
    position=80,355,60,20
    text="Bar 2"
    help="从板2获取条形码"
  endc
  hlabel=control BUTTON
    window=hmain
    position=10,380,60,20
    text="Label"
    help="打印标签"
  endc
  hlinx=control BUTTON
    window=hmain
    position=80,380,60,20
    text="LINX"
    help="发送标签到 L"
  endc
  hsend=control BUTTON
    window=hmain
    position=10,405,60,20
    text="Snd lbl"
    help="将标签发送到打印机"
  endc
  hclear=control BUTTON
    window=hmain
    position=80,405,60,20
    text="Clr lbl"
    help="重置标签打印机"
  endc
  hbmp1=control BUTTON
    window=hmain
    position=10,430,60,20
    text="Smiley"
    help="打印 L 图片"
  endc
  hbmp2=control BUTTON
    window=hmain
    position=80,430,60,20
    text="\"OK\""
    help="打印 L 图片"
  endc
  hshup=control BUTTON
    window=hmain
    position=10,455,60,20
    text="ShUp"
    help="S1 架板框升起"
  endc
  hshdn=control BUTTON
    window=hmain
    position=80,455,60,20
    text="ShDn"
    help="S1 架板框落下"
  endc
  hquit=control BUTTON
    window=hmain
    position=10,495,130,20
    text="关闭"
    help="关闭自动测试"
  endc
  while 1 do
    if Pressed(hunlock) then
      Sendcmd(0,0)
    else if Pressed(hlock) then
      Sendcmd(1,0)
    else if Pressed(hreset) then
      Sendcmd(3,0)
    else if Pressed(hempty) then
      Sendcmd(4,0)
    else if Pressed(hcont) then
      Sendcmd(5,0)
    else if Pressed(hcondbad) then
      Sendcmd(6,0)
    else if Pressed(hcondgood) then
      Sendcmd(7,0)
    else if Pressed(hbad) then
      Sendcmd(8,0)
    else if Pressed(hgood) then
      Sendcmd(9,0)
    else if Pressed(hstopauto) then
      if ($LAY.config & LC_LDMASK)==LC_LMAUTO then
        Sendcmd(14,0)
      else
        Sendcmd(10,0)
      endif
    else if Pressed(hload1) then
      Sendcmd(16,1)
    else if Pressed(hload2) then
      Sendcmd(16,2)
    else if Pressed(hmove) then
      Sendcmd(19,1)
    else if Pressed(hscan) then
      Sendcmd(13,0)
    else if Pressed(hscan1) then
      Sendcmd(32,1)
    else if Pressed(hscan2) then
      Sendcmd(32,2)
    else if Pressed(hbar1) then
      clear htext1
      clear htext2
      buf[0]=S_MARK
      buf[1]=0x10                      // Get barcode
      buf[2]=0x00                      // Reserved
      $uint2(buf+3)=0                  // Scanner
      $uint4(buf+5)=0                  // Reserved
      SYS.Send(9,buf,0)
    else if Pressed(hbar2) then
      clear htext1
      clear htext2
      buf[0]=S_MARK
      buf[1]=0x10                      // Get barcode
      buf[2]=0x00                      // Reserved
      $uint2(buf+3)=1                  // Scanner
      $uint4(buf+5)=0                  // Reserved
      SYS.Send(9,buf,1)
    else if Pressed(hlabel) then
      buf[0]=S_MARK
      buf[1]=0x03                      // Print and place label
      buf[2]=0x00                      // Reserved
      $uint3(buf+3)=300000             // X cordinate
      $uint3(buf+6)=10000              // Y coordinate from the bottom
      $uint4(buf+9)=0                  // Reserved
      $int2(buf+13)=18                 // Length of the text
      $int2(buf+15)=0                  // Reserved
      buf[17]=0                        // Reserved
      Memcpy(buf+18,"Hello!\n{ABC012345}",18)
      SYS.Send(18+18,buf,2)
    else if Pressed(hlinx) then
      buf[0]=S_MARK
      buf[1]=0x02                      // Send data
      buf[2]=0x00                      // Side, this time 0
      $int3(buf+3)=300000              // X coordinate, micrometers
      $int3(buf+6)=10000               // Y coordinate, micrometers
      $int2(buf+9)=200                 // DX, micrometers
      $int2(buf+11)=200                // DY, micrometers
      $int2(buf+13)=32                 // NX, pixels
      $int2(buf+15)=16                 // NY, pixels
      buf[17]=0x00                     // Direction: to the right
      Createsmileycat(buf+18)
      SYS.Send(82,buf,3)
    else if Pressed(hsend) then
      buf[0]=S_MARK
      buf[1]=0x02                      // Send label to printer
      buf[2]=0x00                      // Reserved
      $uint3(buf+3)=0                  // Reserved
      $uint3(buf+6)=0                  // Reserved
      $uint4(buf+9)=0                  // Reserved
      $int2(buf+13)=18                 // Length of the text
      $int2(buf+15)=0                  // Reserved
      buf[17]=0                        // Reserved
      Memcpy(buf+18,"Hello!\n{012345HAL}",18)
      SYS.Send(18+18,buf,2)
    else if Pressed(hclear) then
      buf[0]=S_MARK
      buf[1]=0x04                      // Reset label printer
      buf[2]=0x00                      // Reserved
      $uint3(buf+3)=0                  // Reserved
      $uint3(buf+6)=0                  // Reserved
      $uint4(buf+9)=0                  // Reserved
      $int2(buf+13)=0                  // Reserved
      $int2(buf+15)=0                  // Reserved
      buf[17]=0                        // Reserved
      SYS.Send(18,buf,2)
    else if Pressed(hbmp1) then
      buf[0]=S_MARK
      buf[1]=0x01                      // Print LINX bitmap
      buf[2]=0x00                      // Side, this time 0
      $int3(buf+3)=300000              // X coordinate, micrometers
      $int3(buf+6)=10000               // Y coordinate, micrometers
      $int2(buf+9)=200                 // DX, micrometers
      $int2(buf+11)=200                // DY, micrometers
      $int2(buf+13)=32                 // NX, pixels
      $int2(buf+15)=16                 // NY, pixels
      buf[17]=0x00                     // Direction: to the right
      Createsmileycat(buf+18)
      SYS.Send(82,buf,3)
    else if Pressed(hbmp2) then
      buf[0]=S_MARK
      buf[1]=0x01                      // Print LINX bitmap
      buf[2]=0x00                      // Side, this time 0
      $int3(buf+3)=300000              // X coordinate, micrometers
      $int3(buf+6)=10000               // Y coordinate, micrometers
      $int2(buf+9)=200                 // DX, micrometers
      $int2(buf+11)=200                // DY, micrometers
      $int2(buf+13)=32                 // NX, pixels
      $int2(buf+15)=16                 // NY, pixels
      buf[17]=0x00                     // Direction: to the right
      Createoktext(buf+18)
      SYS.Send(82,buf,3)
    else if Pressed(hshup) then
      Sendcmd(64,0)
    else if Pressed(hshdn) then
      Sendcmd(65,0)
    else if Pressed(hquit) then
      break
    endif
    wait
  enddo
end

