//==========================================================================//
//                                                                          //
//  Copyright (C) 2003                                                      //
//  IDS Imaging Development Systems GmbH                                    //
//  Dimbacherstr. 6                                                         //
//  D-74182 Obersulm-Willsbach                                              //
//                                                                          //
//  The information in this document is subject to change without           //
//  notice and should not be construed as a commitment by IDS Imaging GmbH. //
//  IDS Imaging GmbH does not assume any responsibility for any errors      //
//  that may appear in this document.                                       //
//                                                                          //
//  General permission to copy or modify, but not for profit, is hereby     //
//  granted,  provided that the above copyright notice is included and      //
//  included and reference made to the fact that reproduction privileges    //
//  were granted by IDS Imaging GmbH.                                       //
//                                                                          //
//  IDS cannot assume any responsibility for the use, or misuse, of any     //
//  portion or misuse, of any portion of this software for other than its   //
//  intended diagnostic purpose in calibrating and testing IDS manufactured // 
//  image processing boards and software.                                   //
//                                                                          //
//==========================================================================//
//                                                                          //
// VENDOR : SONY                                                            //
// MODEL  : XC-HR70                                                         //
//                                                                          //
// aktiver Bereich        : 1024 x 768                                      //
// Pixel Clock            : 29,5 MHz                                        //
//                                                                          //
//==========================================================================//
//                                                                          //
// THIS FILE: VERSION 1.01      DATE : 30-09-2003                           //
//                                                                          //
// date         annotation                                                  //
// ------------------------------------------------------------------------ //
// 2003-09-30   Error in on_roi_set removed                                 //
// 2003-07-04   First Release                                               //
//                                                                          //
//==========================================================================//

new width;
new height;

//==========================================================================//
// Called when the script gets loaded and compiled successfully
//==========================================================================//
public on_script_init()
{    
    // Script Type
    //==========================================================================//
        scripttype          = INS_ANALOG  // INS_ANALOG or INS_CAMERALINK


    // Timing
    //==========================================================================//
        clamp_start        = 90;   // Horizontal Clamp Start, in Pixel
        clamp_stop         = 99;   // Horizontal Clamp Stop, in Pixel

        hactive_start       =  262; // Horizontal Active Start, in Pixel
        hactive_stop        = 1285; // Horizontal Active Stop, in Pixel
        hdrive_start        =   0;  // Horizontal Drive Start, in Clk
        hdrive_stop         =  98;  // Horizontal Drive Start, in Clk
        
        vactive_start       =  30;  // Vertical Active Start, in Pixel
        vactive_stop        = 797;  // Vertical Active Stop, in Pixel
        vdrive_start        =   0;  // Vertical Drive Start, in lines
        vdrive_stop         =   1;  // Vertical Drive Start, in lines

        hreset              = 1300; // Horizontal Reset, in Pixel          - MasterMode
        vreset              = 835;  // Vertical Reset, in Pixel            - MasterMode
    
        clock_freq          = 29500000;     // in Hz
        oversampling        = ON;      
    
    // Signal Level
    //==========================================================================//
        videolevel          = 820;      // mV
        videocouple         = AC_CLAMP; // AC, DC or AC_CLAMP
        synclevel           = 2500;     // mV
        clocklevel          = 2500;     // mV
		signaloffset        = 300;		// mV
		signalgain          = 120;
		analoggain          = 1;


    //Signal Polarities 
    //==========================================================================//
        hdpolarity          = 1;        // HIGH_ACTIVE(0) or LOW_ACTIVE(1)
        vdpolarity          = 1;        // HIGH_ACTIVE(0) or LOW_ACTIVE(1)
        triggerpolarity     = 0;        // HIGH_ACTIVE(0) or LOW_ACTIVE(1)
    

    //Mode Values
    //==========================================================================//
        camera_mode         = 1;        // MASTER(0) or SLAVE(1)
        trigger_mode        = 0;        // NOTRIGGER(0), WEN(1) or VDTRIGGER(2)
        sync_mode           = 0;        // HSync(0) or VSync(1)
        scanning_mode       = 0;        // PROGRESSIV(0) or INTERLACE(1)

    // Trigger Parameter
    //==========================================================================//
        trigger_pin         = PIN11;    // Hirose PIN11 oder PIN9
        

    //Source Values
    //==========================================================================//
        sync_source         = 2;        // from SYNCGENERATOR(0), CAMERA(1) or TIMINGGEN(2)
        clock_source        = 0;        // from BOARD(0) or CAMERA(1)    
    
    // Set Size
        width  = hactive_stop - hactive_start + 1;
        height = vactive_stop - vactive_start + 1;
    
    return ERR_OK;
}


//==========================================================================//
// get the current camera resolution (dynamic)
//==========================================================================//
public on_imagesize_get(&sizeX, &sizeY)
{
    // Make use of variables to determine the current resolution.
    sizeX = width;
    sizeY = height;
        
    return ERR_OK;
}

//==========================================================================//
// Called to find out what modes are supported
//==========================================================================//
public on_mode_inquire(mode,&bool:supported)
{
    debugout("on_mode_înquire^n");

    switch (mode)
    {
    case CAM_G10_1:  supported = true;
    default:         supported = false;
    }
    return ERR_OK;
}


//==========================================================================//
// Called to get the current camera mode
//==========================================================================//
public on_mode_get(&mode)
{
    debugout("on_mode_get^n");    
    mode = CAM_G10_1;  
    return ERR_OK;
}


//==========================================================================//
// get the camera name
//==========================================================================//
public on_name_get(name[], length)
{
    debugout("on_name_get^n");

    snprintf(name, length, "SONY XC-HR70 (SLAVE)");
    return ERR_OK;
}


//==========================================================================//
// get the camera description
//==========================================================================//
public on_description_get(name[], length)
{
    debugout("on_description_get^n");
    snprintf(name, length,
	 "TODO: Fill in this information^nCamera Configuration Script^ntest...");
    return ERR_OK;
}


//==========================================================================//
// Is the camera in trigger mode
//==========================================================================//
public on_trigger_get(&bool:activate)
{
    debugout("on_trigger_get^n");
    activate = false;
    return ERR_OK;
}


//==========================================================================//
// Is the camera triggerable?
//==========================================================================//
public on_trigger_inquire(&bool:activate)
{
    debugout("on_trigger_inquire^n");
    activate = false;
    return ERR_OK;
}


//==========================================================================//
// Set the ROI, with the partial scan optimization
//==========================================================================//
public on_roi_set(id, bool:enable, x1, y1, x2, y2)
{
    new error = ERR_OK;
    
    // check ROI number (Ids are 1 based in the API)
    if ((id>1) || (id<1))
        return ERR_PARAMETER;
    
    error = setroi(id, x1, y1, x2, y2, enable);
    if (error == ERR_OK)
        debugout("setroi (%i,%i) (%i,%i)^n", x1, y1, x2, y2); 
    
    return error;
}


//==========================================================================//
// Retrieve the coordinates of the ROI
//==========================================================================//
public on_roi_get(id, &bool:enable, &x1, &y1, &x2, &y2, &count)
{
    new error = ERR_OK;
    debugout("on_roi_get^n");
    
    // check ROI number (Ids are 1 based in the API)
    if ((id>1) || (id<1))
        return ERR_PARAMETER;
    
    count = 1;
    error =  getroi(id, x1, y1, x2, y2, enable);

    return error;
}

//==========================================================================//
// NB: The camera supports only binning in the Y direction
//==========================================================================//
public on_binning_inquire(&Xmax, &Ymax)
{
    debugout("on_binning_inquire^n");
    Xmax = 1;
    Ymax = 1;
    return ERR_OK;
}


//==========================================================================//
// Get the current binning settings
//==========================================================================//
public on_binning_get(&Xbin, &Ybin)
{
    debugout("on_binning_get^n");
    Xbin = 1;
    Ybin = 1;
    return ERR_OK;
}
