#include "ls.icl"                  // Standard functions
#include "or.icl"                // A2 command names
#include "pa.icl"                  // Rich Text Format extentions
#multinst
#cmdbuff 4

#define VERSION        ""
#define DESCRIPTION    "A5 encoder phase test"

// 1.02: Button "Next", video cameras.
// 1.03: Test all to RTF file.

#define DX             300             // Width of encoder data window
#define DY             200             // Height of encoder data window
#define STEPX          0.2             // X step, micrometers, for head/video
#define STEPHY         2.0             // Y step, micrometers, for head
#define STEPVY         0.2             // Y step, micrometers, for video

handle           hmain                 // Main window
handle           hgx                   // X encoder data
handle           hgy                   // Y encoder data
float            wide                  // Compression factor

float            a[2][DX]              // Amplitudes of phases A
float            b[2][DX]              // Amplitudes of phases B
float            z[2][DX]              // Amplitudes of zero pulses
int              n[2][DX]              // Counts

// Service function, redraws phase windows.
function int Redraw(int pos,int head)
  int i,x,y,plot
  float yfact
  yfact=DY/65536.0
  for i=0,i<2,i++ do
    draw window=(i==0?hgx:hgy)
    draw bkcolor=WHITE clear
    // Draw grid.
    draw color=LIGHTGRAY
    for x=DX/2-400,x<=DX/2+400,x=x+10 do
      draw at x,0 to x,DY
    enddo
    draw at DX/2,0 to DX/2,DY
    for y=DY/2-200,y<=DY/2+200,y=y+10 do
      draw at 0,y to DX,y
    enddo
    // Draw X-Y axes.
    draw color=GRAY
    draw at DX/2,0 to DX/2,DY
    draw at 0,DY/2 to DX,DY/2
    // Draw axis name.
    draw font=HUGEFONT
    draw at 10,60 color=PINK
    if head>=$LAY.nfing*2 then
      draw text=format("V%s.%s",(head & 1?"Bot":"Top"),(i==0?"X":"Y"))
    else if head>=0 then
      draw text=format("%2i%c.%s",head/2,(head & 1?'R':'L'),(i==0?"X":"Y"))
    endif
    // Draw scale.
    draw color=DARKGRAY
    draw at 10,DY-23 to 10,DY-17 to 10,DY-20 to 30,DY-20
    draw to 30,DY-23 to 30,DY-16
    draw at 36,DY-12 font=INFOFONT
    if head<$LAY.nfing*2 then
      draw text=format("%.0f um",(i==0?STEPX:STEPHY)*wide*20)
    else
      draw text=format("%.0f um",(i==0?STEPX:STEPVY)*wide*20)
    endif
    // Draw pointer.
    if pos>=0 then
      draw color=BLACK
      draw at pos,5 to pos-2,3 to pos+2,3 to pos,5 to pos,0
    endif
    // Draw phase A.
    plot=0
    draw color=RED
    for x=0,x<DX,x++ do
      if n[i,x]==0 then
        continue
      else if plot==0 then
        draw at x,DY-1-a[i,x]/n[i,x]*yfact
        plot=1
      else
        draw to x,DY-1-a[i,x]/n[i,x]*yfact
      endif
    enddo
    // Draw phase B.
    plot=0
    draw color=GREEN
    for x=0,x<DX,x++ do
      if n[i,x]==0 then
        continue
      else if plot==0 then
        draw at x,DY-1-b[i,x]/n[i,x]*yfact
        plot=1
      else
        draw to x,DY-1-b[i,x]/n[i,x]*yfact
      endif
    enddo
    // Draw zero pulse.
    plot=0
    draw color=BLACK
    for x=0,x<DX,x++ do
      if n[i,x]==0 then
        continue
      else if plot==0 then
        draw at x,DY-1-z[i,x]/n[i,x]*yfact
        plot=1
      else
        draw to x,DY-1-z[i,x]/n[i,x]*yfact
      endif
    enddo
    draw show
  enddo
end

function int main()
  int i,x,y,step,count,firsttime,running,runnext,runall,head,acc
  char s[256],rtf[260]
  handle hhead,hwide,hlowacc,hturbo,hstart,hnext,hall,hstop,hquit
  hmain=control WINDOW
    window=NULL
    position=20,20,DX+114,2*DY+15
    name=format("编码器相位测试%s",VERSION)
    help=" "
    bkcolor=PINK
  endc
  hgx=control GRAPH
    window=hmain
    position=5,5,DX,DY
    help="线性编码器的相位"
    bkcolor=WHITE
  endc
  hgy=control GRAPH
    window=hmain
    position=5,DY+11,DX,DY
    help="旋转编码器的相位"
    bkcolor=WHITE
  endc
  hhead=control COMBOLIST
    window=hmain
    position=DX+10,4,100,330
    help="选择测试头"
    mode=M_VSCROLL
  endc
  for i=0,i<$LAY.nfing*2,i++ do
    add hhead text=format("%2i (%i%c)",i,i/2,(i & 1?'R':'L'))
  enddo
  if ($LAY.cameras & 1) then
    add hhead text=format("%2i (VTop)",$LAY.nfing*2)
  endif
  if ($LAY.cameras & 2) then
    add hhead text=format("%2i (VBot)",$LAY.nfing*2+1)
  endif
  change hhead select=0
  hwide=control CHECKBOX
    window=hmain
    position=DX+10,56,100,20
    text="广阔区域"
    help="检查以扩大零脉冲附近的区域"
    font=INFOFONT
  endc
  hlowacc=control CHECKBOX
    window=hmain
    position=DX+10,81,100,20
    text="低精度"
    help="使用的定位精度低"
    font=INFOFONT
  endc
  hturbo=control CHECKBOX
    window=hmain
    position=DX+10,106,100,20
    text="涡轮运转"
    help="快速但是存在一些瑕疵的测试"
    font=INFOFONT
    mode=M_CHECKED
  endc
  hstart=control BUTTON
    window=hmain
    position=DX+10,143,100,24
    name="开始"
    help="开始对所选编码器进行相位测试"
  endc
  hnext=control BUTTON
    window=hmain
    position=DX+10,173,100,24
    name="下个"
    help="按下继续下一个测试头"
  endc
  hall=control BUTTON
    window=hmain
    position=DX+10,203,100,24
    name="保存.RTF"
    help="按下将所有图形保存到.RTF文件"
  endc
  hstop=control BUTTON
    window=hmain
    position=DX+10,243,100,24
    name="停止"
    help="暂停阶段测试"
  endc
  disable hstop
  hquit=control BUTTON
    window=hmain
    position=DX+10,2*DY-12,100,24
    name="退出"
    help="关闭H5编码器相位测试"
  endc
  wide=1.0
  Redraw(-1,head)
  SYS.Softreset(0);                    // Force soft reset to avoid collisions
  firsttime=1; running=0; runnext=0; runall=0
  Strcpy(rtf,"phases.rtf")
  while 1 do
    if Pressed(hall) then
      if SYS.Browse(hmain,rtf,"Specify file to save data",0)==0 continue
      if ROpen(rtf)!=0 continue
      Strtime(s,"%a %d-%b-%Y %H:%M",0,0)
      RParagraph(RTF_CENTERED|RTF_HEADER|RTF_FIRST)
      RFmt(RTF_TIMES,RTF_ITALIC,12)
      RAddtext(" ")
      RParagraph(RTF_CENTERED|RTF_HEADER|RTF_THINBRD)
      RFmt(RTF_TIMES,RTF_ITALIC,9)
      RAddfmt("Encoder phase test %s - page ",s)
      RAddpagenumber()
      RParagraph(RTF_CENTERED)
      RFmt(RTF_TIMES,RTF_BOLD|RTF_UL,24)
      RAddfmt("Encoder phase test v%s\n",VERSION)
      RFmt(RTF_TIMES,RTF_NORMAL,12)
      RAddfmt("\nTested on: %s\n",s)
      RFmt(RTF_TIMES,RTF_BOLD,12)
      head=0
      change hhead select=head
      runall=1
      disable hstart
      disable hnext
      disable hall
      firsttime=1
      runnext=1
    endif
    if Pressed(hnext) || runnext then
      if firsttime==0 then
        head++
        if head<$LAY.nfing*2 then
          change hhead select=head
        else if head==$LAY.nfing*2 then
          if $LAY.cameras==0 then
            head=0
            change hhead select=head
          else if ($LAY.cameras & 1)==0 then
            change hhead select=head
            head++
          else
            change hhead select=head
          endif
        else if head==$LAY.nfing*2+1 then
          if ($LAY.cameras & 2)==0 head=0
          change hhead select=head
        else
          head=0
          change hhead select=head
        endif
        if runall && head==0 then
          RClose()
          runall=0; runnext=0
          enable hstart
          enable hnext
          enable hall
          running=0
          disable hstop
          SYS.Softreset(0)
          continue
        endif
      endif
      firsttime=0; runnext=1
    endif
    if Pressed(hstart) || runnext then
      runnext=0
      SYS.Killimm(0); $A[0].length=0
      SYS.Killimm(1); $A[1].length=0
      SYS.Killimm(2); $A[2].length=0
      head=Status(hhead)
      if head==$LAY.nfing*2 && ($LAY.cameras & 1)==0 head++
      if head<$LAY.nfing*2 then        // Move opposite finger in home position
        sprintf(s,"M %i(Z) NOP",head^1)
        SERV.Cmdimm(3,s)
        delay 100                      // Wait till movement starts
      endif
      wide=(Status(hwide)?5.0:1.0)
      for i=0,i<2,i++ do
        for x=0,x<DX,x++ do
          a[i,x]=0.0
          b[i,x]=0.0
          z[i,x]=0.0
          n[i,x]=0
        enddo
      enddo
      Redraw(-1,head)
      step=-20
      count=0
      running=1
      enable hstop
    else if Pressed(hstop) then
      if runall then
        RClose()
        runall=0
        enable hstart
        enable hnext
        enable hall
      endif
      running=0
      disable hstop
    else if Pressed(hquit) then
      break
    endif
    if running then
      if count==0 then
        // Move head into different position.
        s[0]=S_MOVE;
        s[1]=0x92;                     // Absolute encoder movement
        s[2]=head;                     // Head
        $uint2(s+3)=32000;             // Height
        s[5]=0;                        // Bending
        $int3(s+6)=(step-DX/2.0)*STEPX*wide    // X phase, micrometers
        if head<$LAY.nfing*2 then
          $int3(s+9)=(step-DX/2.0)*STEPHY*wide // Head Y phase, micrometers
        else
          $int3(s+9)=(step-DX/2.0)*STEPVY*wide // Video Y phase, micrometers
        endif
        $uint2(s+12)=0;                // Radius, must be zero
        acc=(step<0?5:15)
        if Status(hlowacc) acc=acc*15
        s[14]=acc;                     // Accuracy, micrometers
        s[15]=40;                      // Stroke
        s[16]=40;                      // Pressure
        s[17]=0;                       // M_NOP
        SYS.Sendimm(0,18,s);
        count++
      else if $A[0].length>0 && $A[1].length==0 && $A[2].length==0 then
        // Request encoder data.
        s[0]=S_DUMP;
        s[1]=head/2;                   // Rail
        $int4(s+3)=0;                  // Must be zero
        s[2]=(head & 1)==0?6:7;        // Linear encoder data
        SYS.Sendimm(1,7,s);
        s[2]=(head & 1)==0?4:5;        // Rotational encoder data
        SYS.Sendimm(2,7,s);
      else if $A[1].length>0 && $A[2].length>0 then
        // Process encoder data.
        x=$int4($A[1]+5)/STEPX/wide+DX/2
        if x>=0 && x<DX then
          a[0,x]=a[0,x]+$uint2($A[1]+9)
          b[0,x]=b[0,x]+$uint2($A[1]+11)
          z[0,x]=z[0,x]+$uint2($A[1]+13)
          n[0,x]++
        endif
        if head<$LAY.nfing*2 then
          y=$int4($A[2]+5)/STEPHY/wide+DX/2
        else
          y=$int4($A[2]+5)/STEPVY/wide+DX/2
        endif
        if y>=0 && y<DX then
          a[1,y]=a[1,y]+$uint2($A[2]+9)
          b[1,y]=b[1,y]+$uint2($A[2]+11)
          z[1,y]=z[1,y]+$uint2($A[2]+13)
          n[1,y]++
        endif
        $A[1].length=0
        $A[2].length=0
        count++
        if (Status(hturbo)!=0 && count>2) || count>16 then
          Redraw(step,head)
          count=0
          step=step+2
          if step>DX+20 then
            if runall then
              RParagraph(RTF_CENTERED)
              if head<$LAY.nfing*2 then
                RAddfmt("Head %i%c\n\n",head/2,head & 1?'R':'L')
              else
                RAddfmt("%s camera\n\n",head & 1?"Bottom":"Top")
              endif
              RAddpiczoom(hgx,0,0,DX,DY,1,0.8)
              RAddtext("    ")
              RAddpiczoom(hgy,0,0,DX,DY,1,0.8)
              RAddtext("\n\n")
              runnext=1
            endif
            step=-20
          endif
        endif
      endif
    endif
    wait
  enddo
  SYS.Softreset(0);                    // Force soft reset to avoid collision
end
