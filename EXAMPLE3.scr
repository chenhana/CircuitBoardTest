#include "ls.icl"                  // System definitions and functions
#cmdbuff 1                             // 1 command buffer

#define MAINX          500             // Width of main window (client area)
#define MAINY          300             // Height of main window (client area)
#define GRAPHDX        400             // Width of video viewer (client area)
#define GRAPHDY        290             // Height of video viewer (client area)
#define BTNDX          85              // Width of buttons
#define BTNDY          20              // Height of buttons
#define BORDER         5               // Distance between controls

handle           hmain                 // Handle of main window
handle           hview                 // Handle of video viewer
handle           hexit                 // Handle of Exit button
handle           hu,hl,hr,hd           // Positioning cross Up,Left,Right,Down
handle           hbrightness           // Handle of brightness control
handle           hcontrast             // Handle of contrast control

// Given head, returns associated video channel, or -1 if head is invalid or
// carries no camera. Channel is the 0-based camera index. For example, if some
// tester has cameras on heads 0L, 1R, 2L and 3R, then 0L is channel 0, 1R is
// channel 1 and 3R is channel 3.
function int Channelfromhead(int head)
  int i,channel
  if $LAY.cameras!=0 then
    // Dedicated camera, nowadays rare.
    if head==$LAY.nfing*2 return 0
    if head==$LAY.nfing*2+1 return 1
  else if ($LAY.headcameras & (1<<head))!=0 then
    // Head camera.
    channel=0
    for i=0,i<head,i++ do
      if ($LAY.headcameras & (1<<i))!=0 channel++
    enddo
    return channel
  endif
  return -1
end

// Given Y coordinate in millimeters, selects head, corresponding video channel,
// side and rotation angle. If possible, preferes top side. Returns head on
// success and -1 on any error.
function int Camerafromy(float y,int *channel,int *side,float *angle)
  int head
  float h,headcamradius
  if $LAY.cameras!=0 then
    // Dedicated camera, nowadays rare.
    channel[0]=($LAY.cameras & 1)==0?1:0
    side[0]=channel[0]
    angle[0]=0.0
    return $LAY.nfing*2+channel[0]
  else if $LAY.headcameras!=0 then
    // Head camera.
    for head=0,head<$LAY.nfing*2,head++ do
      if ($LAY.headcameras & (1<<head))==0 continue
      if $LAY.top[head/2]/1000.0<=y continue
      if $LAY.bottom[head/2]/1000.0>y continue
      break
    enddo
    if head>=$LAY.nfing*2 return -1
    channel[0]=Channelfromhead(head)
    side[0]=$LAY.side[head/2]
    h=y-$LAY.yoffset[head/2]/1000.0
    // To calculate angle, we need camera radius. Usually it is specified in
    // the layout. If not, suggest it from finger length or rail height.
    if $EXTLAY.headcamradius!=0 then   // Camera radius available
      headcamradius=$EXTLAY.headcamradius/1000.0
    else if $EXTLAY.radius!=0 then     // Head radius available
      headcamradius=$EXTLAY.radius/1000.0+3.0
    else if $LAY.top[0]-$LAY.bottom[0]<160000 then // Most probably A6/S2/A8
      headcamradius=118.0
    else if $LAY.top[0]-$LAY.bottom[0]<240000 then // Most probably A5
      headcamradius=153.0
    else                               // Most probably A7
      headcamradius=183.0
    endif
    // Calculate image angle.
    angle[0]=(Abs(h)>0.9*headcamradius?0.0:Asin(h/headcamradius))
    if side[0]!=0 angle[0]=-angle[0]
    if (head & 1)!=0 angle[0]=-angle[0]
    return head
  else
    return -1                          // No cameras
  endif
end

// Main program.
function int main()
  int i,move,pending,setcam,head,channel,side
  float xmin,ymin,xmax,ymax,x,y,angle
  char s[256]
  // Create main window.
  hmain=control WINDOW                 // Top level window
    window=NULL                        // Stand-alone window
    position=10,10,MAINX,MAINY         // Size of cient area MAINX*MAINY pixels
    name="简单视频查看"         // Window's title
    help=" "                           // 光标向内移动时为空帮助
    color=BLACK                        // Default foreground is black
    bkcolor=WHITE                      // Default background is white
  endc
  // Create video viewer window.
  hview=control GRAPH                  // Window with integrated bitmap buffer
    window=hmain                       // Child of main window
    position=BORDER,BORDER,GRAPHDX,GRAPHDY
    help="视频查看器"
    color=BLACK                        // Colour of the border around window
    bkcolor=VIDEOFILL                  // Video shows only through this colour
  endc
  // Draw positioning cross in the center of the video window. Window of type
  // GRAPH already has bitmap buffer, it is not necessary to specify size=xxx
  // in the definition of the control. Note that last point in the line is not
  // drawn (Windows!), hence +1.
  draw window=hview color=LIGHTRED
  draw at GRAPHDX/2-50,GRAPHDY/2 to GRAPHDX/2-5+1,GRAPHDY/2
  draw at GRAPHDX/2+5,GRAPHDY/2 to GRAPHDX/2+50+1,GRAPHDY/2
  draw at GRAPHDX/2,GRAPHDY/2-50 to GRAPHDX/2,GRAPHDY/2-5+1
  draw at GRAPHDX/2,GRAPHDY/2+5 to GRAPHDX/2,GRAPHDY/2+50+1
  draw show                            // Flushes buffer to screen
  // Create positioning buttons.
  hu=control BUTTON                    // Pushbutton
    window=hmain                       // Child of main window
    position=GRAPHDX+40,BORDER+10,25,25
    name="上"
    help="按住可向上移动相机"
    font=MEDIUMFONT                    // Larger fat font
    mode=M_REPEAT                      // Autorepeat button: press and hold
  endc
  hl=control BUTTON
    window=hmain
    position=GRAPHDX+10,BORDER+40,25,25
    name="左"
    help="按住不放，将相机向上移动"
    font=MEDIUMFONT
    mode=M_REPEAT
  endc
  hr=control BUTTON
    window=hmain
    position=GRAPHDX+70,BORDER+40,25,25
    name="右"
    help="按住不放，将相机向右移动"
    font=MEDIUMFONT
    mode=M_REPEAT
  endc
  hd=control BUTTON
    window=hmain
    position=GRAPHDX+40,BORDER+70,25,25
    name="下"
    help="按住可向下移动相机"
    font=MEDIUMFONT
    mode=M_REPEAT
  endc
  // Create "brightness" and "contrast" scrolls. In fact, brightness is the
  // gain and contrast is the exposure. If scroll control is named, its
  // position is automatically stored in the ollytest.ini and will be restored
  // on the next launch.
  hbrightness=control HSCROLL          // Horizontal scroll
    window=hmain
    position=GRAPHDX+2*BORDER,BORDER+120,BTNDX,20
    name="亮度"                  // Setting is stored in .ini file
    help="调整视频图像的亮度"
    limits=-100,100                    // Brightness changes from -100 to 100
  endc
  hcontrast=control HSCROLL            // Horizontal scroll
    window=hmain
    position=GRAPHDX+2*BORDER,BORDER+145,BTNDX,20
    name="对比度"                    // Setting is stored in .ini file
    help="调整视频图像的对比度"
    limits=-100,100                    // Contrast changes from -100 to 100
  endc
  // Create Exit button.
  hexit=control BUTTON                 // Pushbutton
    window=hmain                       // Child of main window
    position=GRAPHDX+2*BORDER,MAINY-BTNDY-BORDER,BTNDX,BTNDY
    name="退出"                        // Name of the button
    help="按下关闭视频查看器" // 帮助，光标移过时出现
  endc
  // Calculate size of the working area. All coordinates in layout are in
  // micrometers.
  ymin=1.0e99
  ymax=-1.0e99
  for i=0,i<$LAY.nfing,i++ do
    if $LAY.side[i]!=0 continue        // Top side only
    ymin=Min(ymin,$LAY.bottom[i]/1000.0)
    ymax=Max(ymax,$LAY.top[i]/1000.0)
  enddo
  xmin=$LAY.leftlimit/1000.0
  xmax=$LAY.rightlimit/1000.0
  if $LAY.cameras!=0 then
    // Dedicated cameras, take restricted area into account. For very old
    // testers (A2/A3/A4) the same restriction must be subtracted from the
    // right limit, too.
    xmin=xmin+$LAY.videodeadx/1000.0
  endif
  // Main loop.
  x=(xmin+xmax)/2.0                    // Initial position in the center
  y=(ymin+ymax)/2.0
  move=1                               // Select camera and move it to (x,y)
  pending=0                            // As yet no pending movements
  setcam=1                             // Change camera settings
  while 1 do
    // Check whether some positioning button is pressed. Autorepeat buttons
    // accumulate press count since last call to Status().
    if Pressed(hu) then
      y=y+(Status(hu)+1)*1.000         // Move up in 1-mm steps
      move=1
    else if Pressed(hl) then
      x=x-(Status(hl)+1)*1.000         // Move left in 1-mm steps
      move=1
    else if Pressed(hr) then
      x=x+(Status(hr)+1)*1.000         // Move right in 1-mm steps
      move=1
    else if Pressed(hd) then
      y=y-(Status(hd)+1)*1.000         // Move down in 1-mm steps
      move=1
    endif
    // Check whether previous movement is executed. Non-zero length of the
    // answer means that answer is back.
    if pending!=0 && $A[0].length>0 then
      pending=0
    endif
    // If movement is requested, send it to the tester. New movement is
    // possible only when previous movement is finished.
    if move!=0 && pending==0 then
      // Limit coordinates to working area. Topmost coordinate is not allowed
      // for heads but is allowed for the camera.
      x=Max(xmin,Min(x,xmax))
      y=Max(ymin,Min(y,ymax))
      // Determine which head must execute this movement.
      head=Camerafromy(y,&channel,&side,&angle)
      if head>=0 then
        if $LAY.cameras!=0 then
          // Dedicated camera.
          sprintf(s,"M %i[%g,%g] NOP",head,x,y)
        else
          // Head camera. '@' means camera movement (optical axis of the camera
          // stays over the specified coordinates, not needle tip).
          sprintf(s,"M @%i[%g,%g] NOP",head,x,y)
        endif
        // Send movement.
        SERV.Cmdimm(0,s)
        pending=1
        setcam=1                       // We may need to change camera settings
      endif
      move=0                           // New movement is sent
    endif
    // If brightness or contrast are changed, reprogram camera.
    if Pressed(hbrightness) || Pressed(hcontrast) then
      setcam=1
    endif
    // If necessary, startt video and/or change camera settings. Zoom is preset
    // to 1.0.
    if setcam!=0 then
      SYS.Videoangle(hview,channel,side,1.0,                                   \
        Status(hbrightness),Status(hcontrast),2,angle)
      setcam=0                         // New settings applied
    endif
    // Stop script if Exit button pressed.
    if Pressed(hexit) then
      break
    endif
    // Give timeslice to other scripts and apps.
    wait                               
  enddo
end

